"$schema" = "https://pixi.sh/v0.27.0/schema/manifest/schema.json"

[tasks]
dev = {description = "run ALL tasks", depends-on = [
  "fix",
  "lint",
  "dist",
  "test",
  "docs",
]}
setup = {description = "perform ALL setup", depends-on = [
  "setup-js",
  "pip-build",
  "setup-ext",
]}
fix = {description = "fix ALL style", depends-on = [
  "fix-taplo",
  "fix-yarn-dupes",
  "fix-package-json",
  "fix-prettier",
  "fix-stylelint",
  "fix-eslint",
  "fix-nbstripout",
  "fix-ruff",
]}
lint = {description = "check ALL style", depends-on = [
  "lint-package-json",
  "lint-prettier",
  "lint-stylelint",
  "lint-ruff",
  "lint-eslint",
  "lint-actionlint",
]}
test = {description = "run ALL tests", depends-on = [
  "test-pytest",
  "test-pytest-oldest",
]}
build = {description = "build ALL intermediate artifacts", depends-on = [
  "build-js-lib",
  "build-js-ext",
]}
dist = {description = "build ALL distribution artifacts", depends-on = [
  "dist-py",
  "dist-npm",
  "dist-twine",
  "dist-hash",
]}
docs = {description = "build ALL docs", depends-on = ["docs-lite", "docs-sphinx"]}

# reusable unbound tasks #######################################################
[tasks.pip-e-]
description = "install an editable package"
cmd = """rm -rf build/pip-freeze-e/$PIXI_ENVIRONMENT_NAME.txt
&& mkdir -p build/pip-freeze-e
&& python -m pip install -e .
  -vv
  --no-deps
  --ignore-installed
  --no-build-isolation
  --disable-pip-version-check
&& pip check
&& pip freeze > build/pip-freeze-e/$PIXI_ENVIRONMENT_NAME.txt
"""

[tasks.pip-whl-]
description = "install a built wheel"
cmd = """rm -rf build/pip-freeze-whl/$PIXI_ENVIRONMENT_NAME.txt
&& mkdir -p build/pip-freeze-whl
&& python -m pip install dist/*.whl
  -vv
  --no-deps
  --ignore-installed
  --disable-pip-version-check
&& pip check
&& pip freeze > build/pip-freeze-whl/$PIXI_ENVIRONMENT_NAME.txt
"""

[tasks.ci-preflight-node]
description = "set up some skipped tasks for building in CI"
cmd = """mkdir -p build/skip
&& ls node_modules/.yarn-state.yml
&& touch build/skip/jlpm
|| echo "will install nodejs packages"
"""

[tasks.ci-preflight-test]
description = "set up some skipped tasks for testing in CI"
cmd = """mkdir -p build/skip
&& touch
  build/skip/jlpm
  build/skip/tsc
  build/skip/ext
  build/skip/whl
"""

# setup ########################################################################
[feature.tasks-build.tasks.pip-build]
description = "install an editable package in the build env"
cmd = "pixi r -e build pip-e-"
inputs = ["pyproject.toml"]
outputs = ["build/pip-freeze-e/build.txt"]

[feature.tasks-build.tasks.setup-js]
description = "set up nodejs environment"
cmd = "ls build/skip/jlpm || jlpm"
inputs = ["package.json", "yarn.lock", ".yarnrc.yml", "build/skip"]
outputs = ["yarn.lock", "node_modules/.yarn-state.yml"]

[feature.tasks-build.tasks.setup-ext]
description = "set up the extension in the build environment"
cmd = """jupyter labextension develop --overwrite --debug
  && jupyter labextension list
"""
inputs = ["{package.json,yarn.lock,.yarnrc.yml}"]
depends-on = ["setup-js", "pip-build", "build-js-ext"]

# lint/fix #####################################################################
[feature.tasks-lint.tasks.prettier--]
description = "run prettier"
cmd = """
jlpm prettier
  --cache-location=build/.cache/prettier
  --list-different
  "*.{md,json,yml,js}"
  "{js,style,docs,.github}/**/*.{json,ts,css,md,yml}"
"""

[feature.tasks-lint.tasks.fix-prettier]
description = "run prettier and write changes"
cmd = "pixi r prettier-- --write"
depends-on = ["setup-js"]
inputs = ["*.{md,json,yml,js}", "{js,style,docs,.github}", "!.ipynb_checkpoints"]

[feature.tasks-lint.tasks.lint-prettier]
description = "check prettier style"
cmd = "pixi r prettier--"
depends-on = ["setup-js"]
inputs = [
  "*.{md,json,yml,js}",
  "{js,style,docs,.github}",
  "!.ipynb_checkpoints/",
]

[feature.tasks-lint.tasks.eslint--]
cmd = """
jlpm eslint --ext .js,.jsx,.ts,.tsx --cache --cache-location build/.cache/eslint js/ webpack.config.js
"""

[feature.tasks-lint.tasks.fix-yarn-dupes]
description = "fix duplicates in yarn.lock"
cmd = "jlpm yarn-berry-deduplicate --fail --strategy=fewer"
depends-on = ["setup-js"]
inputs = ["package.json"]

[feature.tasks-lint.tasks.fix-eslint]
cmd = """pixi r eslint-- --fix"""
depends-on = ["setup-js"]
inputs = ["package.json", "js/**/*.ts", "webpack.config.js", "tsconfig*.json"]

[feature.tasks-lint.tasks.lint-eslint]
cmd = """pixi r eslint--"""
depends-on = ["setup-js"]
inputs = ["package.json", "js/**/*.ts", "webpack.config.js", "tsconfig*.json"]

[feature.tasks-lint.tasks.fix-package-json]
description = "fix package.json"
cmd = "jlpm prettier-package-json --write"
depends-on = ["setup-js"]
inputs = ["package.json"]

[feature.tasks-lint.tasks.lint-package-json]
description = "check package.json"
cmd = """
jlpm prettier-package-json --list-different
"""
depends-on = ["setup-js"]
inputs = ["package.json"]

[feature.tasks-lint.tasks.stylelint--]
cmd = """
jlpm stylelint --cache-location build/.cache/stylelint --cache "{style,docs}/**/*.css"
"""

[feature.tasks-lint.tasks.fix-stylelint]
cmd = "pixi r stylelint-- --fix"
inputs = ["package.json", "{style,docs}/**/*.css"]
depends-on = ["setup-js", "fix-prettier"]

[feature.tasks-lint.tasks.lint-stylelint]
cmd = "pixi r stylelint--"
inputs = ["package.json", "{style,docs}/**/*.css"]
depends-on = ["setup-js"]

[feature.tasks-lint.tasks.fix-ruff]
description = "fix python style"
cmd = "ruff format && ruff check --fix-only"
inputs = [
  "{tests,src/ipyprofiler}/**/*.py",
  "pyproject.toml",
  "examples/files/**/*.ipynb",
  "!.ipynb_checkpoints/",
]

[feature.tasks-lint.tasks.lint-ruff]
description = "check python style"
cmd = "ruff format --check && ruff check"
inputs = [
  "{tests,src/ipyprofiler}/**/*.py",
  "pyproject.toml",
  "examples/files/**/*.ipynb",
  "!.ipynb_checkpoints/",
]

[feature.tasks-lint.tasks.fix-taplo]
description = "fix toml style"
cmd = """taplo fmt
  --option=array_auto_collapse=false
  --option=array_auto_expand=true
  --option=compact_inline_tables=true
  --option=column_width=88
  --option=indent_string="  "
  *.toml"""
outputs = ["*.toml"]

[feature.tasks-lint.tasks.fix-nbstripout]
description = "fix notebook style"
cmd = """nbstripout --keep-id examples/files/*.ipynb"""
inputs = ["examples/files/**/*.ipynb", "!.ipynb_checkpoints/"]

[feature.tasks-lint.tasks.lint-actionlint]
description = "check CI style"
cmd = "actionlint -shellcheck=shellcheck -pyflakes=pyflakes"
inputs = [".github/workflows"]

# build ########################################################################
[feature.tasks-build.tasks.build-js-lib]
description = "build js from ts"
cmd = "ls build/skip/tsc || jlpm tsc -b js --verbose"
inputs = ["package.json", "js", "tsconfig*.json", "build/skip"]
outputs = ["build/{root,src}.tsbuildinfo", "lib"]
depends-on = ["setup-js"]

[feature.tasks-build.tasks.build-js-ext]
description = "build the labextension"
cmd = "ls build/skip/ext || jupyter labextension build"
inputs = ["{lib,style}", "{package.json,webpack.config.js}", "build/skip"]
outputs = ["src/_d/share"]
depends-on = ["build-js-lib"]

# test #########################################################################
[feature.tasks-test.tasks.pip-test]
description = "install a built package in the test environment"
cmd = "pixi r -e test pip-whl-"
inputs = ["pyproject.toml", "dist/*.whl"]
outputs = ["build/pip-freeze-whl/test.txt"]
depends-on = ["dist-py"]

[feature.tasks-test.tasks.test-pytest]
description = "test the package with coverage"
cmd = """
pytest
  -Werror
  --html=build/reports/test/pytest.html
  --css=tests/theme.css
  --self-contained-html
  --cov-report=html:build/reports/test/htmlcov
  --cov-report=term-missing:skip-covered
  --cov=ipyprofiler
  --cov-branch
  --cov-context=test
  --no-cov-on-fail
  --cov-fail-under=100
"""
inputs = [
  "build/pip-freeze-whl/test.txt",
  "pyproject.toml",
  "tests/",
  "dist/*.whl",
  "examples/files",
  "!**/.ipynb_checkpoints",
]
outputs = ["build/reports/test/{pytest.html,htmlcov/status.json}"]
depends-on = ["pip-test"]

# test-oldest ##################################################################
[feature.tasks-test-oldest.tasks.pip-test-oldest]
description = "install the built package in the oldest compatible environment"
cmd = "pixi r -e test-oldest pip-whl-"
inputs = ["dist/*.whl"]
outputs = [
  "build/pip-freeze-whl/test-oldest.txt",
  ".pixi/envs/test-oldest/share/jupyter/labextensions/@deathbeds/jupyter-profiler/package.json",
]
depends-on = ["dist-py"]

[feature.tasks-test-oldest.tasks.test-pytest-oldest]
description = "test the package in the oldest compatible environment"
cmd = """
JUPYTER_PLATFORM_DIRS=1 pytest
  --html=build/reports/test-oldest/pytest.html
  --self-contained-html
"""
inputs = [
  "tests/",
  "dist/*.whl",
  "pyproject.toml",
  "examples/files",
  "!**/.ipynb_checkpoints",
  "build/pip-freeze-whl/test-oldest.txt",
]
outputs = ["build/reports/test-oldest/pytest.html"]
depends-on = ["pip-test-oldest", "dist-py"]

[feature.tasks-test-oldest.tasks.lab-oldest]
description = "start jupyterlab in the oldest compatible environment"
cmd = "jupyter lab --no-browser --debug"
depends-on = ["setup", "pip-test-oldest"]

# dist #########################################################################
[feature.tasks-build.tasks.dist-py]
description = "build python distributions"
cmd = """
rm -rf build/pip-freeze-whl
&& ls build/skip/whl
|| pyproject-build . --no-isolation
"""
inputs = [
  "{pyproject.toml,LICENSE,README.md}",
  "src/**/*.py",
  "src/_d",
  "build/skip",
  "examples/files",
]
outputs = ["dist/*.{whl,tar.gz}", "!**/.ipynb_checkpoints"]
depends-on = ["build-js-ext"]

[feature.tasks-build.tasks.dist-npm]
description = "build npm distributions"
cmd = "mkdir -p dist && cd dist && npm pack .."
inputs = ["lib", "js", "style", "{.npmignore,README.md,LICENSE,package.json}"]
outputs = ["dist/*.tgz"]
depends-on = ["build-js-lib"]

[feature.tasks-build.tasks.dist-twine]
description = "check python distribution"
cmd = "twine check --strict dist/*.whl dist/*.tar.gz"
inputs = ["dist/*.{whl,tar.gz}"]
depends-on = ["dist-py"]

[feature.tasks-build.tasks.dist-hash]
description = "hash built assets"
cmd = """
cd dist
&& sha256sum $(ls *.whl *.tar.gz *.tgz) > SHA256SUMS
&& ls -shS1 *
&& cat SHA256SUMS
"""
inputs = ["dist/*.{whl,tar.gz,tgz}"]
outputs = ["dist/SHA256SUMS"]
depends-on = ["dist-py", "dist-npm"]

# interactive ##################################################################
[feature.tasks-lab.tasks.pip-lab]
description = "install an editable package in the interactive environment"
cmd = "pixi r -e lab pip-e-"
inputs = ["pyproject.toml"]
outputs = ["build/pip-freeze-e/lab.txt"]

[feature.tasks-lab.tasks.lab]
description = "start jupyterlab"
cmd = "jupyter lab --no-browser --debug"
depends-on = ["setup", "pip-lab"]

[feature.tasks-lab.tasks.watch-lib]
description = "watch ts source and rebuild js on change"
cmd = "jlpm tsc -b js -w"
depends-on = ["build-js-lib"]

[feature.tasks-lab.tasks.watch-ext]
description = "watch the js and rebuild the extension on change"
cmd = "jupyter labextension watch"
depends-on = ["build-js-ext"]

# docs #########################################################################
[feature.tasks-docs.tasks.pip-docs]
description = "install a built package in the docs environment"
cmd = "pixi r -e docs pip-whl-"
inputs = ["dist/*.whl"]
outputs = ["build/pip-freeze-whl/docs.txt"]

[feature.tasks-docs.tasks.docs-lite-samples]
cmd = """python -c "
from urllib.request import urlretrieve;
urlretrieve('$URL/$NAME', 'examples/files/$NAME')
"
"""
env = {URL = "https://github.com/jlfwong/speedscope/archive/refs/tags", NAME = "v1.20.0.tar.gz"}
outputs = ["examples/files/v1.20.0.tar.gz"]

[feature.tasks-docs.tasks.docs-lite]
description = "build the lite site"
cmd = "cd examples && jupyter-lite doit -- pre_archive:report:SHA256SUMS"
depends-on = ["dist-py", "pip-docs", "docs-lite-samples"]
inputs = ["dist", "examples/files", "examples/*.json"]
outputs = ["build/docs-app/SHA256SUMS"]

[feature.tasks-docs.tasks.docs-sphinx]
description = "build the docs site"
cmd = "sphinx-build -b html -W --keep-going docs build/docs"
depends-on = ["docs-lite"]
inputs = ["build/docs-app/SHA256SUMS", "*.toml", "docs"]
outputs = ["build/docs/.buildinfo"]

[feature.tasks-docs.tasks.docs-serve]
description = "naively serve the docs"
cmd = "cd build/docs && python -m http.server -b 127.0.0.1"
depends-on = ["docs-sphinx"]

# sphinx #######################################################################
[tool.sphinx]
author = "{{ ppt.project.authors[0].name }}"
project = "{{ ppt.project.name }}"
copyright = "2024 {{ ppt.project.authors[0].name }}"
exclude_patterns = ["rtd.rst"]
extensions = [
  "sphinx.ext.autodoc",
  "sphinx.ext.autosectionlabel",
  "sphinx.ext.intersphinx",
  "sphinx.ext.viewcode",
  "myst_nb",
]
autosectionlabel_prefix_document = true
myst_heading_anchors = 3
suppress_warnings = ["autosectionlabel.*"]
templates_path = ["_templates"]
html_static_path = [
  "../build/docs-app",
  "../build/reports",
  "_static",
]
html_theme = "pydata_sphinx_theme"
html_css_files = ["theme.css"]
release = "{{ ppt.project.version }}"
version = "{{ ppt.project.version.split('.')[0] }}"
autoclass_content = "both"
always_document_param_types = true
typehints_defaults = "comma"
typehints_use_signature_return = true

[tool.sphinx.html_theme_options]
github_url = "{{ ppt.project.urls.Source }}"
header_links_before_dropdown = 10
navigation_with_keys = false
pygments_dark_style = "github-dark-colorblind"
pygments_light_style = "github-light-colorblind"
use_edit_page_button = true
icon_links = [
  {name = "PyPI", url = "{{ ppt.project.urls.PyPI }}", icon = "fa-brands fa-python"},
]

[tool.sphinx.html_context]
docs_path = "docs"
github_user = "deathbeds"
github_repo = "ipyprofiler"
github_version = "main"

[tool.sphinx._intersphinx_mapping]
python = "https://docs.python.org/3"

# deps #########################################################################
[feature.deps-run.dependencies]
ipywidgets = ">=7,<9"
pyinstrument = ">=4.4.0"

[feature.deps-run-oldest.dependencies]
ipywidgets = "7.*"
jupyterlab = "3.5.*"
jupyter_server = "1.*"
pip = "*"
pyinstrument = "4.4.0"
python = "3.8.*"
nbconvert = "6.4.*"

[feature.deps-lab.dependencies]
jupyterlab = ">=4.0.0,<4.3"
sqlalchemy = "2.*"
ipylab = "*"

[feature.deps-build.dependencies]
flit-core = ">=3.9.0,<4"
pip = "*"
python = ">=3.8,<3.13"

[feature.deps-dist.dependencies]
python-build = "*"
twine = "*"

[feature.deps-node.dependencies]
nodejs = "22.*"

[feature.deps-lint.system-requirements]
macos = "11.0"

[feature.deps-lint.dependencies]
ruff = "*"
taplo = "*"
nbstripout = "*"
actionlint-with-all = "*"

[feature.deps-test.dependencies]
pytest = ">=8,<9"
pytest-cov = "*"
pytest-html = "*"
nbconvert-core = "*"
ansi2html = "*"

[feature.deps-lite.dependencies]
ipywidgets = "8.1.3"
jupyterlab_widgets = "3.0.12"
jupyterlite-core = "0.4.*"
jupyterlite-pyodide-kernel = "0.4.*"
python-libarchive-c = "*"

[feature.deps-docs.dependencies]
myst-nb = "*"
pydata-sphinx-theme = "*"

# envs ########################################################################

[environments]
build = ["deps-build", "deps-dist", "deps-lab", "deps-node", "deps-run", "tasks-build"]
lint = ["deps-lint", "deps-node", "deps-lab", "tasks-lint"]
docs = ["deps-docs", "deps-lab", "deps-build", "tasks-docs", "deps-lite"]
lab = [
  "deps-build",
  "deps-dist",
  "deps-lab",
  "deps-lint",
  "deps-node",
  "deps-run",
  "deps-test",
  "tasks-lab",
]
test = ["deps-test", "deps-run", "deps-build", "tasks-test"]
test-oldest = ["deps-test", "deps-run", "deps-run-oldest", "tasks-test-oldest"]

# meta ########################################################################

[project]
name = "ipyprofiler"
platforms = ["linux-64", "win-64", "osx-64", "osx-arm64"]
channels = ["conda-forge"]
